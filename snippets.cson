# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#

# javascript
'.source.js':

  # vanilla
  'Function':
    'prefix': 'fu'
    'body': 'function($1) {\n  $2\n}'

  'Auto-Executing Anonymous Function':
    'prefix': 'fua'
    'body': '(function($1) {\n  $2\n})();'

  'Log':
    'prefix': 'log'
    'body': 'console.log($1);$2'

  'Alert':
    'prefix': 'al'
    'body': 'alert($1);$2'

  'If':
    'prefix': 'if'
    'body': 'if ($1) {\n  $2\n}'

  'For':
    'prefix': 'for'
    'body': 'for (var i = 0; i < $1; i++) {\n  $2\n}'

  'Module':
    'prefix': 'module'
    'body': '(function(scope) {\n  var ModuleName$1 = (function() {\n\n    var privateVariable = \'private\';\n\n    return {\n      publicMethod: function() {}\n    };\n  })();\n\n  scope.ModuleName$2 = ModuleName$3;\n})(this);'

  'Constructor':
    'prefix': 'construct'
    'body': '(function(scope) {\n  function ConstructorName$1(options) { \n    this.property = options.property; \n    this.init(); \n  }\n\n  ConstructorName$2.prototype.init = function(){\n    console.log(\'init\'); \n  };\n\n  var constructorName$3 = function(options) {\n    return new ConstructorName$4(options);\n  };\n\n  scope.constructorName$5 = constructorName$6; \n})(this);'

  'Class':
    'prefix': 'class'
    'body': 'class $1 {\n  constructor(options) {\n    this.props = options || {};\n\n    $2\n  }\n}'

  'Import':
    'prefix': 'import'
    'body': 'import $1 from \'$3\';'

  'Export':
    'prefix': 'export'
    'body': 'export default $1;'

  # jquery
  '$.on':
    'prefix': 'on'
    'body': '$collection$1.on({\n  click: function(event) {\n    $2\n  }\n});'

  '$.ajax':
    'prefix': 'ajax'
    'body': '$.ajax({\n  url: \'$1\' \n}).done(function(data) {\n   $2 \n});'

  '$.each':
    'prefix': 'each'
    'body': '$.each(arrayOrObject$1, function(key, value) {\n   $2 \n});'

  '$.proxy':
    'prefix': 'proxy'
    'body': '$.proxy(functionName$1, context$2);'


  #mocha
  'describe':
    'prefix': 'desc'
    'body': 'describe(\'$1\', function() {\n  $2\n});'

  'context':
    'prefix': 'cont'
    'body': 'context(\'$1\', function() {\n  $2\n});'

  'it':
    'prefix': 'it'
    'body': 'it(\'$1\', function() {\n  $2\n});'

  'expect':
    'prefix': 'exp'
    'body': 'expect($1);'

  'before':
    'prefix': 'bef'
    'body': 'before(function() {\n  $1\n});'

  'beforeEach':
    'prefix': 'befe'
    'body': 'beforeEach(function() {\n  $1\n});'

  'after':
    'prefix': 'aft'
    'body': 'after(function() {\n  $1\n});'

  'afterEach':
    'prefix': 'afte'
    'body': 'afterEach(function() {\n  $1\n});'

  #q-unit
  'test':
    'prefix': 'test'
    'body': 'test(\'$1\', function(assert) {\n  $2\n});'

  'assert':
    'prefix': 'ass'
    'body': 'assert.$1($2);'

  'ok':
    'prefix': 'ok'
    'body': 'ok($1);'

  'visit':
    'prefix': 'visit'
    'body': 'visit(\'/$1\');$2'

  'andThen':
    'prefix': 'and'
    'body': 'andThen(function() {\n  $1\n});'

  #ember
  'Computed':
    'prefix': 'computed',
    'body': 'Ember.computed(\n  \'$1\', {\n\n  get() {\n    $2\n  }\n})$3'

  'Run':
    'prefix': 'run',
    'body': 'Ember.run((\$1\) => {\n  $2\n});$3'

# sass
'.source.scss':
  'Include':
    'prefix': 'inc'
    'body': '@include $1;'
